import { OpenAI } from "openai";
import dotenv from "dotenv";
import Fuse from "fuse.js";
import redis from "../config/redisClient.js";
import getMenuItemsData from "../config/getDataToAi.js";
import { commonQuestions } from "../libs/constants.js";

dotenv.config();
const openai = new OpenAI({ apiKey: process.env.OPENAI_KEY });

// üü¢ Danh s√°ch c√¢u h·ªèi ph·ªï bi·∫øn & ph·∫£n h·ªìi c√≥ s·∫µn


// üü¢ L∆∞u h·ªôi tho·∫°i v√†o Redis
async function saveConversation(userId, role, content) {
  const message = JSON.stringify({ role, content });
  await redis.lpush(`conversation:${userId}`, message);
  await redis.ltrim(`conversation:${userId}`, 0, 9); // Gi·ªØ 10 tin nh·∫Øn g·∫ßn nh·∫•t
}

// üü¢ L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i t·ª´ Redis
async function getConversationHistory(userId) {
  const messages = await redis.lrange(`conversation:${userId}`, 0, -1);
  return messages.reverse().map((msg) => JSON.parse(msg));
}

// üü¢ T√¨m c√¢u h·ªèi g·∫ßn gi·ªëng trong Redis
async function getSimilarQuestion(userQuestion) {
  const keys = await redis.keys("*");
  const fuse = new Fuse(keys, { threshold: 0.3 });
  const result = fuse.search(userQuestion);

  if (result.length > 0) {
    console.log("‚úÖ T√¨m th·∫•y c√¢u h·ªèi g·∫ßn gi·ªëng:", result[0].item);
    return await redis.get(result[0].item);
  }
  return null;
}

// üü¢ T√¨m m√≥n ƒÉn g·∫ßn ƒë√∫ng trong MongoDB
async function fuzzySearchData(query) {
  const menuItems = await getMenuItemsData();
  const fuse = new Fuse(menuItems, {
    threshold: 0.5,
    keys: ["Name", "Description", "Category"],
  });
  return fuse.search(query).map((result) => result.item);
}

const fuseCommon = new Fuse(commonQuestions, {
  keys: ["question"],
  threshold: 0.4,
});

// üü¢ T√¨m c√¢u h·ªèi g·∫ßn gi·ªëng trong danh s√°ch `common_questions`
function getCommonQuestionAnswer(userQuestion) {
  const result = fuseCommon.search(userQuestion);
  if (result.length > 0) {
    console.log(
      "‚úÖ Ph·∫£n h·ªìi t·ª´ danh s√°ch c√¢u h·ªèi ph·ªï bi·∫øn:",
      result[0].item.question
    );
    return result[0].item.answer;
  }
  return null;
}
function extractKeywords(text) {
  const stopWords = [
    "t√¥i",
    "mu·ªën",
    "ƒÉn",
    "c√≥",
    "g·ª£i √Ω",
    "cho",
    "v·ªÅ",
    "l√†",
    "xem",
  ];
  return text
    .toLowerCase()
    .split(" ")
    .filter((word) => !stopWords.includes(word)) // Lo·∫°i b·ªè t·ª´ kh√¥ng quan tr·ªçng
    .join(" ");
}

// üü¢ X·ª≠ l√Ω c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
export async function generateAIResponse(userId, message) {
  console.log("üì© Nh·∫≠n y√™u c·∫ßu t·ª´ user:", message);

  const keyWords = extractKeywords(message);
  // 1Ô∏è‚É£ Ki·ªÉm tra xem c√¢u h·ªèi c√≥ trong danh s√°ch `common_questions` kh√¥ng
  const commonAnswer = getCommonQuestionAnswer(message);
  if (commonAnswer) {
    return commonAnswer;
  }
  // 2Ô∏è‚É£ Ki·ªÉm tra c√¢u h·ªèi g·∫ßn gi·ªëng trong Redis
  const cachedReply = await getSimilarQuestion(keyWords);
  if (cachedReply) {
    console.log("‚úÖ L·∫•y ph·∫£n h·ªìi t·ª´ Redis Cache");
    return cachedReply;
  }

  // 3Ô∏è‚É£ T√¨m m√≥n ƒÉn trong MongoDB
  const matchedItems = await fuzzySearchData(keyWords);
  if (matchedItems.length === 0) {
    return "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.";
  }

  // 4Ô∏è‚É£ L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i t·ª´ Redis
  const history = await getConversationHistory(userId);

  // 5Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu cho OpenAI API
  let messages = [
    { role: "system", content: "B·∫°n l√† chatbot t∆∞ v·∫•n m√≥n ƒÉn t·ª´ MongoDB." },
    ...history,
    {
      role: "system",
      content: `M√≥n ƒÉn li√™n quan:\n${JSON.stringify(matchedItems)}`,
    },
    { role: "user", content: keyWords },
  ];

  // 6Ô∏è‚É£ G·ªçi OpenAI API
  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo",
    messages: messages,
  });

  if (!response.choices || response.choices.length === 0) {
    throw new Error("OpenAI kh√¥ng tr·∫£ v·ªÅ ph·∫£n h·ªìi h·ª£p l·ªá.");
  }

  const reply = response.choices[0].message.content;
  console.log("ü§ñ OpenAI ph·∫£n h·ªìi:", reply);

  // 7Ô∏è‚É£ L∆∞u c√¢u h·ªèi + c√¢u tr·∫£ l·ªùi v√†o Redis
  await saveConversation(userId, "user", message);
  await saveConversation(userId, "assistant", reply);
  await redis.setex(message, 86400, reply);

  return reply;
}
